<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Awesome Web Blog]]></title>
  <link href="http://anoobbava.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://anoobbava.github.io/"/>
  <updated>2018-03-28T12:54:54+05:30</updated>
  <id>http://anoobbava.github.io/</id>
  <author>
    <name><![CDATA[Anoob Bava]]></name>
    <email><![CDATA[anoob.bava@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upload Images Using Cloudinary in Heroku]]></title>
    <link href="http://anoobbava.github.io/blog/2018/03/28/upload-images-using-cloudinary-in-heroku/"/>
    <updated>2018-03-28T11:43:11+05:30</updated>
    <id>http://anoobbava.github.io/blog/2018/03/28/upload-images-using-cloudinary-in-heroku</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p>  <img src="/images/cloudinary/1.png" width="600" height="200"></p>

<p>  As discussed in the previous blogs, heroku is an awesome tool to deploy our application within minutes and no hassles. The issue is with the heroku is, for each specific applications ,need to use the add-ons. some are free and others are paid version. But to use add-on like cloudinary need to provide the credit card info, Here we are explaining how to bypass this issue</p>

<h2>Cloudinary</h2>

<p>  <img src="/images/cloudinary/2.png" width="700" height="300"></p>

<p>Cloudinary, as the name indicates it is a cloud space to save the images and videos. Can be used for both the web and mobile platform. Also the cloudinary provides a cool space as free tier(10GB something and 300000 photos). when We tweet about them, they provides an additional 1GB Also, Awesome right and thanks to cloudinary too.</p>

<h2>Implementation</h2>

<ol>
<li><p>signup with <a href="https://cloudinary.com/">Cloudinary</a></p></li>
<li><p>generate the custom cloudinary.yml via cloudinary console</p></li>
<li><p>copy to the project path</p></li>
<li><p>update the upoader File</p></li>
<li><p>Update in Herkou with ENV Variable.</p></li>
<li><p>deploy the code to heroku</p></li>
</ol>


<h3>Signup with Cloudinary</h3>

<p>Create an account with <a href="https://cloudinary.com/">Cloudinary</a> using email and password.</p>

<p><img src="/images/cloudinary/3.png" width="900" height="300"></p>

<h3>Cloudinary.yml</h3>

<p>If you have not seen the cloudinary.yml, dont worry, will paste my cloudinary.yml file below, Please chnage the details from the dashboard.</p>

<p>below is the dashboard, copy this details and replace these details to the yml file.</p>

<p><img src="/images/cloudinary/4.png" width="900" height="300"></p>

<p>  <script src="https://gist.github.com/anoobbava/c7fd8141c0ace8ddfac514dc145a2c3e.js"></script></p>

<h3>copy to the project path</h3>

<p>include this file in <strong>application_root/config/</strong></p>

<h4>update the upoader File</h4>

<p> in the Uploader.rb file(ImageUploader.rb or AvatarUploader.rb) change the following,</p>

<p>comment below codes</p>

<pre><code># storage :file

# def store_dir
  #   "uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}"
  # end
</code></pre>

<h3>Update in Herkou with ENV Variable</h3>

<p>Login in <strong>herkou</strong> dashboard and take our application and add environment variable.</p>

<p><img src="/images/cloudinary/5.png" width="800" height="300"></p>

<pre><code>  CLOUDINARY_URL
</code></pre>

<h3>deploy the code to heroku</h3>

<p>no worries, no need to change the code in the image_tag and upload tags, for me it is all working fine</p>

<p>you check in my site for the output <strong>blog-app-bava.herokuapp.com</strong></p>

<p>code will be available in <a href="https://github.com/anoobbava/blog_app">github</a></p>

<p>all set. thanks guys, comment if any error or doubt happend</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement Likes Rails With AJAX Using Acts as Votable Gem]]></title>
    <link href="http://anoobbava.github.io/blog/2018/03/15/implement-likes-rails-with-ajax-using-acts-as-votable-gem/"/>
    <updated>2018-03-15T12:24:19+05:30</updated>
    <id>http://anoobbava.github.io/blog/2018/03/15/implement-likes-rails-with-ajax-using-acts-as-votable-gem</id>
    <content type="html"><![CDATA[<h3>Why this Gem</h3>

<p>  Thanks to Ryan T, without his idea, it will be diffcult. Acts as votable is a gem deals with voting mechanisms, like and unlike things etc, pretyy cool isn&rsquo;t it right.This blog is only a simple idea to use this gem, for more advanced ones you can go to the</p>

<p>  <a href="https://github.com/ryanto/acts_as_votable">github link</a></p>

<h3>Add Gem to Rails Project</h3>

<p>  to fetch the latest version, <a href="https://rubygems.org/gems/acts_as_votable">rubygems acts as votable</a>
  copy the gem and add to our project Gemfile</p>

<p>  <img src="/images/acts_as_votable/1.png" width="400" height="200"></p>

<p>  then run</p>

<pre><code class="``">    bundle install
</code></pre>

<h3>create a migration for the  acts_as_votable</h3>

<p>  In order to save the votes and its depanancies, needed a table, Thanks to Gem, they will create automatically when we run the migration, Run the command in the Terminal.</p>

<pre><code class="``">  rails generate acts_as_votable:migration
</code></pre>

<pre><code class="``">    bundle exe rails db:migrate
</code></pre>

<h3>Use case in Project</h3>

<p>  The Project here I have here is the blog project which contains the Article model and User model. The User able to like an article. By Using AJAX , there is no need to refresh the page. so in the Article model add</p>

<pre><code class="``">    acts_as_votable
</code></pre>

<p>  <img src="/images/acts_as_votable/2.png" width="600" height="200"></p>

<p>  Also add the voter to User model Also,</p>

<pre><code class="``">    acts_as_voter
</code></pre>

<p>  <img src="/images/acts_as_votable/3.png" width="600" height="100"></p>

<h3>ADD the Corresponding Action in the controller</h3>

<p>  In order to work, we need to create an action in the controller, here in my case, there is ArticlesController, what we are doing is create a new action called like</p>

<p>  <img src="/images/acts_as_votable/4.png" width="600" height="100"></p>

<h2>  Will explain the codes here below</h2>

<p>  since we are only implementing here, we need to add the table which user likes the article, for that , the built-in from gem is the &ldquo;upvote_from&rdquo;.
  current_user is the devise_helper to fetch the logined user.
  @article is an instance of the article page.</p>

<h3>ADD the Routes</h3>

<p>  Since the like is the custom action, what we need is the new routes in the article and it is a PUT Action.Also each like belongs to a single article, so we are implementing is the member action under the articles</p>

<p>  <img src="/images/acts_as_votable/5.png" width="500" height="100"></p>

<h3>Create a template corresponding to Like action</h3>

<p>  We are using AJAX to update the count of likes, this will need a like.js.haml needed inside app/views/articles/</p>

<p>  contents are</p>

<p>  <img src="/images/acts_as_votable/6.png" width="600" height="100"></p>

<p>  Right now, the code does not make any sense. since I am following HAML logic, a little bit different than ERB ones.
  the #like-count is the div id, what we have used here is , after liking, we updated the count of likes to #like-count div.
  get_upvotes.size is the helper to fetch the count of likes for the corresponding article.</p>

<h3>Like button in the UI</h3>

<p>  will check the routes is everything all okay,</p>

<p>  <img src="/images/acts_as_votable/7.png" width="700" height="100"></p>

<p>  Ahh!, All set, now add the route path in the page where like button needed, I have added a like.png image in assets to look like social media button. also a CSS class to reduce the image size, if you needed add that or just discard that.</p>

<p>  <img src="/images/acts_as_votable/8.png" width="700" height="100"></p>

<h3>ADD the Div id to update the count of like</h3>

<p>  We have mentioned and id = #like-count in the lik.js.haml, need to add that in any place we can show the count of like. In my example, i have a glyphicon to show that before that i added it like below.</p>

<p>  <img src="/images/acts_as_votable/9.png" width="700" height="100"></p>

<h2>  Will Explain the codes below</h2>

<p>  when the page intially loaded acts_votable gem called &ldquo;get_upvotes&rdquo; will fetch all the likes and show in the page, after that, if any likee from user, then the system Will AJAX and there by calling the like.js.haml and update the new count via AJAX.</p>

<p>  All completed, now the output, will show you, like button</p>

<p>  <img src="/images/acts_as_votable/10.png" width="200" height="100"></p>

<p>  like count image</p>

<p>  <img src="/images/acts_as_votable/11.png" width="300" height="100"></p>

<p>   Note: the count shows as 2 because, I liked 2 times from 2 different accounts, actually there will like only one like per account per article, the gem is intellegent as it is ,again Thanks to Ryan T for this,
   If you have show stoppers, please check the code in</p>

<p>  <a href="https://github.com/anoobbava/wiki_clone_app">github</a></p>

<p>  thanks Guys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement Rspec in ROR Project]]></title>
    <link href="http://anoobbava.github.io/blog/2018/02/27/implement-rspec-in-ror-project/"/>
    <updated>2018-02-27T16:44:30+05:30</updated>
    <id>http://anoobbava.github.io/blog/2018/02/27/implement-rspec-in-ror-project</id>
    <content type="html"><![CDATA[<h2>Rspec, A Brief</h2>

<p> Below is the some syntaxes and errors i have encountered when using rspec, I have shared here for every ones' use.</p>

<h3>install rspec</h3>

<p>  install the rspec gem using the below command</p>

<pre><code class="``">  gem install rspec
</code></pre>

<h3>create a test Group</h3>

<pre><code class="``">  group :test do
    gem 'codeclimate-test-reporter', '~&gt; 1.0.0'
    gem 'database_cleaner', '~&gt; 1.5'
    gem 'factory_bot', '~&gt; 4.8', '&gt;= 4.8.2'
    gem 'factory_bot_rails'
    gem 'faker', '~&gt; 1.6.1'
    gem 'rails-controller-testing', '~&gt; 0.0.3'
    gem 'rspec', '~&gt; 3.6'
    gem 'shoulda-matchers'
    gem 'simplecov'
  end
</code></pre>

<p>  the gem factory_girl is deprecated right now, so we are using the factory_bot instead.</p>

<h3>Add rspec-rails to the Development Group</h3>

<pre><code class="``">  gem 'rspec-rails'
</code></pre>

<p>  Now we need to add the development, test group</p>

<h3>Intialise the folders for Rspec</h3>

<p>  achieved using the below command</p>

<pre><code class="```">   rspec --init
</code></pre>

<h3>Require rspec/rails to spec helper</h3>

<pre><code class="``">  require 'rspec/rails'
</code></pre>

<p>   need to add above command to the spec_helper</p>

<h3>You are Go</h3>

<p>  All set, now delete the test/ folder in the project and create the specs in models and ccontrollers</p>

<p>  to generate rspec file for existing controller</p>

<pre><code class="``">  rails generate rspec:controller Controller_name
</code></pre>

<p>  to generate rspec file for exising model</p>

<pre><code class="``">  rails generate rspec:model model_name
</code></pre>

<h3>setup test database</h3>

<p>  Do the below step only if you don&rsquo;t have the test database created</p>

<pre><code class="``">  rake db:test:prepare
</code></pre>

<h3>Why we need the database cleaner</h3>

<p>  Is a useful tool to clear the dB from the test database. for that need to use the database_cleaner gem in test group.</p>

<ol>
<li><p>add the gem</p>

<pre><code>gem 'database_cleaner'
</code></pre></li>
<li><p>require in spec_helper</p>

<pre><code>require 'database_cleaner'
</code></pre></li>
<li><p>add the tables where clearing is needed</p>

<pre><code>DatabaseCleaner.strategy = :truncation, { :only =&gt; %w[users] }
</code></pre>

<p>here users is one table, multiple tables can be added using comma</p></li>
<li>Call the action</li>
</ol>


<p>  add the below line where we need to clean the dB</p>

<pre><code class="``">  DatabaseCleaner.clean
</code></pre>

<p>  Note: in psql manually create test database  and do rake db:migrate RAILS_ENV=test</p>

<h3>Important Points to  remember</h3>

<ol>
<li>To clear all the data</li>
</ol>


<p>  add the below line to the spec_helper</p>

<pre><code class="``">  config.after :all do
   ActiveRecord::Base.subclasses.each(&amp;:delete_all)
  end
</code></pre>

<p>  2.To view the console of test dB</p>

<pre><code class="``">  rails c test
</code></pre>

<ol>
<li><p>If below Error comes up</p>

<p>undefined method `sign_in' for #&lt;RSpec::Core:</p>

<h2>Solution</h2>

<p>add below line to spec_helper</p>

<pre><code>config.include Devise::TestHelpers, type: :controller
</code></pre></li>
<li><p>If below error pops Up</p>

<p> rmed176lt@RMED176LT:~/ror/12-week/wiki_clone$ bundle exec rails generate rspec:install
 Running via Spring preloader in process 10346
 Could not find generator &lsquo;rspec:install&rsquo;. Maybe you meant &lsquo;devise:install&rsquo;, &lsquo;responders:install&rsquo; or &lsquo;simple_form:install&rsquo;
 Run <code>rails generate --help</code> for more options.</p>

<h2> Solution</h2>

<p> <a href="https://stackoverflow.com/questions/39542169/rails-5-could-not-find-generator-rspecinstall/39542170">visit link for SO answer</a></p></li>
<li><p>If below error pops up</p></li>
</ol>


<p>  1) ArticlesController redirect to user signin
       Failure/Error: get :index</p>

<pre><code>   NoMethodError:
     undefined method `get' for #&lt;RSpec::ExampleGroups::ArticlesController:0xb8c4f8c&gt;
     Did you mean?  gets
                    gem
   # ./spec/controllers/articles_controller_spec.rb:6:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>  Finished in 0.00479 seconds (files took 4.41 seconds to load)
  1 example, 1 failure</p>

<p>  Failed examples:</p>

<p>  rspec ./spec/controllers/articles_controller_spec.rb:5 # ArticlesController redirect to user signin</p>

<h2>  Solution</h2>

<ol>
<li>need to add require &lsquo;rspec/rails&rsquo; in spec_helper</li>
<li>if wont work then add below line
<code>
config.infer_spec_type_from_file_location!
</code>
for me, 2 nd one is not required.</li>
</ol>


<h3>below is sample spec_helper.rb</h3>

<script src="https://gist.github.com/anoobbava/27255d8052d7b8d5ac095f511e6e242b.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Blog With Octopress]]></title>
    <link href="http://anoobbava.github.io/blog/2017/11/14/create-a-blogging-site-using-octopress-and-github/"/>
    <updated>2017-11-14T19:20:57+05:30</updated>
    <id>http://anoobbava.github.io/blog/2017/11/14/create-a-blogging-site-using-octopress-and-github</id>
    <content type="html"><![CDATA[<h3>Why Blogging</h3>

<p>Most of us are very much interested to write the blog to share what we think and to express our ideas to the world. But in reality, it won&rsquo;t work. Sometimes Lazy attitude and lack of knowlegde about how to blog. Thanks to Ruby We have Awesome tool called Jekyll to blog.</p>

<h3>What is a Jekyll.</h3>

<p><img src="/images/octopress/jekyll_image.png" width="600" height="300"></p>

<p>Jeykyll is a static, simple blog aware site generator out of ruby. It is the one of the most trending repos of ruby in gthub.There are a lot of customisations in the jekyll; when we look it for the first time, we dont understand it very well.Same experiance for me too, but I don&rsquo;t give up. I learned more about that and I came up with Octopress.</p>

<p><a href="https://github.com/jekyll/jekyll">github link for jekyll</a></p>

<h3>What is Octopress</h3>

<p>First of all, Octopress is a blogging framework for hackers built on top of jekyll. It has awesome theme with nice understanding workflow for a newbee.</p>

<h3>What we need</h3>

<ol>
<li>Github account</li>
<li>undertstanding about Ruby Programing language</li>
<li>YML and kind of thigs</li>
<li>Any IDE like Sublime Text</li>
</ol>


<h3>Setup Github</h3>

<p>The reason I like GitHub it is super cool and provides free services. We can create public repos free and there is a place for static page too. In order to that need to create a repo name like this
github-user-name.github.io.
github-user-name is the username of your GitHub. Suppose your username is awesome.Repo name is awesome.github.io</p>

<h4>Create new repository</h4>

<p>  for test purpose used a repo named user-name.github.io, here i have used awesome.github.io</p>

<p>  <img src="/images/octopress/1.png" width="600" height="300"></p>

<p>make sure it is a public repository and create repository.
since already have a github.io in my account, I cant use that refer to this answer in stackoverflow.
<a href="https://stackoverflow.com/questions/15563685/can-i-create-more-than-one-repository-for-github-pages">refer link for details</a>.All done from th github account.</p>

<h3>Setup the octopress.</h3>

<p><a href="http://octopress.org/docs/setup/">Refer using the link</a></p>

<ol>
<li><p>before installing octopress, make sure we have the ruby, git installed in our system.</p></li>
<li><p>clone the octopress using below git url
<code>
git clone git://github.com/imathis/octopress.git awesome_blog
</code></p></li>
<li><p>Change to the directory awesome_blog</p></li>
</ol>


<p><img src="/images/octopress/2.png" width="600" height="300"></p>

<p>4.set the ruby version using rvm</p>

<p><img src="/images/octopress/3.png" width="600" height="300"></p>

<p>5.install the bundler using below command</p>

<pre><code>gem install bundler
</code></pre>

<p>6.then bundle install</p>

<p><img src="/images/octopress/4.png" width="600" height="300"></p>

<p>7.octopress is bundled with default theme, we can customise later, for now, we will use the default theme.</p>

<pre><code>rake install
</code></pre>

<p><img src="/images/octopress/5.png" width="600" height="300"></p>

<h3>linking GitHub account with Octopress</h3>

<p>To do that we need to run this code.</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>It is actually a rake task will ask the GitHub URL Repo.
here we have
<code>
git@github.com:anoobbava/awesome.github.io.git
</code>
Also it creates a new remote called octopress. A new branch source is created which contains the updations from our side where as the master contains the static page.</p>

<p><img src="/images/octopress/6.png" width="600" height="300"></p>

<p>Now the process we need to generate a static page from this code, this can be achived using below command.
<code>
rake generate
</code>
push this generated static site to the github using the command.
<code>
rake deploy
</code></p>

<p>Now the page is deployed, but the changes are still in the local machine we need to push to source branch.
Which is achieved by
<code>
  git add .
  git commit -m 'commit msg'
  git push origin source
</code>
<em>Note to remember:</em> The static page deployed in the master branch and the code that we changed need to be pushed to source branch.</p>

<p>when we done any changes, and need this change in the production, so the below commands to be executed after every changes occurs.
<code>
  rake generate
  rake deploy
</code>
7.png</p>

<p><img src="/images/octopress/7.png" width="600" height="300"></p>

<p>I have an existing user-name.github.io with account, So i can&rsquo;t create an another one. So I will be explain about the existing github.io account.</p>

<h3>Write a Blog using Octopress</h3>

<p>For that I have switched to my account, you guys can use the user-name.github.io account.</p>

<p>Create a new post using below command.</p>

<pre><code class="`"> rake new_post["post_name"]
</code></pre>

<p> Before creating a blog post, We need to understand that this rake will generate a file in a markdown format and this markdown file will be end with YYYY-MM-DD-post-title.markdown and the path is in source/_posts.</p>

<p> Here I am creating a blog of how to create a blog using octopress and github.</p>

<p><img src="/images/octopress/8.png" width="600" height="300"></p>

<p>The above rake will create a YAML based file which contains below details</p>

<pre><code>---
layout: post
title: "Create a Blogging site using Octopress and GitHub"
date: 2017-11-14 19:20:57 +0530
comments: true
categories: 
---
</code></pre>

<p>All the things are bit straight forward ,only doubt comes from comments: true and the categories. Comments will be discussed later, categories means which all categories this blog will comes, we can provide multiple ones, here I am using below ones only.</p>

<pre><code>categories: [Ruby, octopress]
</code></pre>

<p>Now we need to test what is the result is going to come, achieved by using below commands,</p>

<pre><code>rake generate # will make the static file
rake preview # generate a localhost:4000 web browser and we can preview file.
</code></pre>

<p><img src="/images/octopress/9.png" width="600" height="300"></p>

<h3>Browser result</h3>

<p><img src="/images/octopress/10.png" width="600" height="300"></p>

<p>If we don&rsquo;t want the file to be published and we need to do some path works and design and something and you are in the middle of the blog, then set the</p>

<pre><code>published: false
</code></pre>

<p>to the blog post and it will not publish the page to the blogging site
example:
<code>
blog yml
layout: post
title: "Create a Blogging site using Octopress and GitHub"
date: 2017-11-14 19:20:57 +0530
comments: true
categories: [Ruby, octopress]
published: false
</code>
then refresh the browser, Hooray the new blog is disappeard.</p>

<p><img src="/images/octopress/11.png" width="600" height="300"></p>

<h3>Sharing code and highlights</h3>

<p>we can use using tilde &ldquo;~&rdquo; symbols for this option.The below option is achived using 3 tilde in one line, then in the next line data and in the next line 3 symbols</p>

<pre><code>You are Awesome
</code></pre>

<p><img src="/images/octopress/12.png" width="300" height="100"></p>

<h4>Display images inside the blog</h4>

<ol>
<li>Place the image in to the blog path/source/images/
2.better to keep a folder for each blog posts inside the images/</li>
</ol>


<pre><code>syntax: {"%img /images/blogfolder/image_name size %"}
example : {"%img /images/octopress/23 600 300 %"}
</code></pre>

<p>Since we cant use the correct syntax, because octopress executed as command, so Please remove the double quotes inside the braces before using the above syntax.</p>

<h4>Gist inclusion</h4>

<p>If we have more code examples, the preferred is the gist inclusion. Gist is a place where we can store the chunks of code for later use, like the commons rspec for a controllers or ActiveRecord queries etc.
It is Free and from github. Go to the <a href="https://gist.github.com/">ink</a> and create a gist and add to the blog. copy the embeded path starts with the &ldquo;script src&rdquo; and paste inside the blog like below</p>

<p>```</p>

<script src="https://gist.github.com/anoobbava/e197d468b7f8d8cc3e404fed9ced1b38.js"></script>


<pre><code>
All of configs are not covered here, Please refer the official octopress blog for details. Happy Blogging all of you, dont forget that once you completed, then do the below steps to complete
</code></pre>

<p>rake generate
rake deploy
rake add .
git commit -m &lsquo;Completed the blog about the octopress&rsquo;
git push origin source
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Circle CI]]></title>
    <link href="http://anoobbava.github.io/blog/2017/10/24/introduction-to-circle-ci/"/>
    <updated>2017-10-24T20:06:55+05:30</updated>
    <id>http://anoobbava.github.io/blog/2017/10/24/introduction-to-circle-ci</id>
    <content type="html"><![CDATA[<h2>Intro &amp;&amp; Setup Project</h2>

<p>CircleCI helps you ship better code, faster. To kick things off, you&rsquo;ll need to add a config.yml file to your project, and start building. After that, we&rsquo;ll start a new build for you each time make a PR. Similar to travis; here also needed a yml file for configs and update.</p>

<h2>Steps</h2>

<p>1.Signup using github</p>

<p><img src="/images/circleci/intro.png" width="800" height="300"></p>

<ol>
<li>Add our Project</li>
</ol>


<p><img src="/images/circleci/add_project.png" width="800" height="300"></p>

<ol>
<li><p>Create a folder named .circleci and add a fileconfig.yml (so that the filepath in .circleci/config.yml).</p></li>
<li><p>Populate the config.yml with the contents of the below file.</p></li>
</ol>


<script src="https://gist.github.com/anoobbava/2c9417987a3e67210395119aa5083c48.js"></script>


<ol>
<li><p>Update the config.yml to reflect your project&rsquo;s configuration.</p></li>
<li><p>Push this change to GitHub.</p></li>
<li><p>Start building! This will launch your project on Circle CI , now it will analyse the code and check the system for PR.all done, system will automatically test when make our PR.</p></li>
</ol>


<p><img src="/images/circleci/circle_Pr.png" width="800" height="300"></p>

<p>Awesome, we got our error on build we can see what is the error.</p>

<p><img src="/images/circleci/circle_error_pr.png" width="800" height="300"></p>

<p>The issue is we have mentioned is ruby in gem file as 2.3.1 but in the config of circle is 2.4.1. we will update it as another commit.</p>

<p>I Found it, circle CI using docker images pre-built ones, Here we are using the ruby version 2.3.1 in Gemfile and the config.yml added 2.4.1. Going the below url
<a href="https://circleci.com/docs/2.0/circleci-images/#ruby">go to circle docs info</a>
- most matched version is 2.3; now we are commiting using that code. All work fine.Now we select the image,
We can select linux, IOS, or custom host in circle CI, For this tutorial I have used the linux plan, hobbyist one. We can use containers.</p>

<p><img src="/images/circleci/circle_all_test_passed.png" width="800" height="300"></p>

<p></p>
]]></content>
  </entry>
  
</feed>

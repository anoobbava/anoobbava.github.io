<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Awesome Web Blog]]></title>
  <link href="http://anoobbava.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://anoobbava.github.io/"/>
  <updated>2018-06-28T16:27:58+05:30</updated>
  <id>http://anoobbava.github.io/</id>
  <author>
    <name><![CDATA[Anoob Bava]]></name>
    <email><![CDATA[anoob.bava@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GCP:3 Install Nginx and Setup Unicorn]]></title>
    <link href="http://anoobbava.github.io/blog/2018/06/21/gcp-3-install-nginx-and-setup-unicorn/"/>
    <updated>2018-06-21T18:15:15+05:30</updated>
    <id>http://anoobbava.github.io/blog/2018/06/21/gcp-3-install-nginx-and-setup-unicorn</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Hi All, this is the 3rd post of our deployment tool, so far we have covered the Setup for instance and installing ruby and postgres. Now what we want is to install the Nginx and Unicorn. Nginx is our App server and Unicorn is our web server. We are Not going to explain about the concepts of nginx and Unicorn; instead we used these tools to deploy our App.We already had a staging server, we used that to setup and installation.</p>

<h3>A little House keeping</h3>

<p>Image of the staging server is running.</p>

<p><img src="/images/gcp3/1.png" width="600" height="400"></p>

<p>terminal connection in staging server</p>

<p><img src="/images/gcp3/2.png" width="600" height="400"></p>

<h3>Setup Nginx</h3>

<pre><code>  sudo apt-get install nginx
</code></pre>

<p><img src="/images/gcp3/3.png" width="600" height="100"></p>

<p>Now Check the nginx status using</p>

<pre><code>  sudo service nginx status
</code></pre>

<p><img src="/images/gcp3/4.png" width="600" height="100"></p>

<p>other commands</p>

<p>to restart nginx</p>

<pre><code>sudo service nginx restart
</code></pre>

<p>to stop the nginx</p>

<pre><code>  sudo service nginx stop
</code></pre>

<p>to start the nginx</p>

<pre><code>  sudo service nginx start
</code></pre>

<p>here we are not configuring the nginx right now, we will do that later.</p>

<h3>Installing Unicorn</h3>

<p> Like I already said, we are using the unicorn as app server,by default puma is
the development server with Rails 5.X.X.</p>

<p>1.add the unicorn gem to production group
<code>
  gem 'unicorn'
</code>
<img src="/images/gcp3/5.png" width="400" height="100"></p>

<ol>
<li>add the unicorn configuration file in config/ path</li>
</ol>


<p><img src="/images/gcp3/6.png" width="800" height="100"></p>

<p>Consider only the unicorn.rb file only.The total scripts are added below for
verification, Like I already said, there are a lot of configurations are there.
Just google it for details.</p>

<script src="https://gist.github.com/anoobbava/cb5b1fa5a71f73a204a6c51ea1e03c08.js"></script>


<p>3.commit these code changes to our code base, since I have already commit those,
 I don&rsquo;t want do it again.
I know, it is only a short blog, we just covered here, will explained about
deployment using mina in the next blog,!!promise</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delayed Job With Recurring Option]]></title>
    <link href="http://anoobbava.github.io/blog/2018/05/29/delayed-job-with-recurring-option/"/>
    <updated>2018-05-29T22:37:41+05:30</updated>
    <id>http://anoobbava.github.io/blog/2018/05/29/delayed-job-with-recurring-option</id>
    <content type="html"><![CDATA[<h2>delayed job recurring</h2>

<h3>Requirement</h3>

<p>I have an app called clone app and the user will update some information to the table call user_informations. Our requirement is to copy this data to another table user_information_backups. It will be a background job. But we dont want to run this when the user updated the user_informations, instead what we are planning is to do the backup in each 5 mins. when the backup is completed, mark the cloned one master as flagged to restrict one information to be taken more than one.</p>

<p><a href="git@github.com:anoobbava/delayed_job_recurring_example.git">app link</a></p>

<h3>1. create an app user_clone</h3>

<p><img src="/images/dj/1.png" width="800" height="500"></p>

<p>used the database as mysql in dev, since I have sqlyog to installed for proper UI View and understanding.</p>

<p>database is mysql , we can understand from the gemfile.</p>

<p><img src="/images/dj/2.png" width="800" height="500"></p>

<p>my database.yml file is attached below</p>

<p><img src="/images/dj/3.png" width="600" height="200"></p>

<p>Need to create the database</p>

<p><img src="/images/dj/4.png" width="800" height="500"></p>

<p>now the database is shown in the sqlyog tool</p>

<p><img src="/images/dj/5.png" width="400" height="300"></p>

<p>create the model UserInformation</p>

<p><img src="/images/dj/6.png" width="900" height="500"></p>

<p>update the user_informations migration</p>

<p><img src="/images/dj/7.png" width="900" height="500"></p>

<p>migrated the file</p>

<p><img src="/images/dj/8.png" width="900" height="500"></p>

<p>created the model UserInformationBackup</p>

<p><img src="/images/dj/9.png" width="900" height="500"></p>

<p>display the table in sqlyog</p>

<p><img src="/images/dj/10.png" width="400" height="200"></p>

<p>Now, we need to generate the controller</p>

<p><img src="/images/dj/11.png" width="900" height="500"></p>

<p>Do the crud operations.</p>

<p>controller code is attached here below,</p>

<script src="https://gist.github.com/anoobbava/b1a856e6d9b732cbd1565e5a643714ce.js"></script>


<p>routes file</p>

<p><img src="/images/dj/12.png" width="300" height="100"></p>

<p>index page</p>

<p><img src="/images/dj/13.png" width="900" height="500"></p>

<p>new Page</p>

<p><img src="/images/dj/14.png" width="900" height="500"></p>

<p>update the migration to fetch only the unselected ones</p>

<p>is_selected to user_informations , default value: false</p>

<p><img src="/images/dj/15.png" width="900" height="500"></p>

<p><img src="/images/dj/16.png" width="900" height="500"></p>

<p>add a custom action in controller and route</p>

<pre><code>  get 'users/display_backup', to: "users#display_backup"
</code></pre>

<p>action in controller</p>

<pre><code>  def display_backup
    @users = UserInformation.all.where(is_selected: false)
  end
</code></pre>

<p>create the view part for the action</p>

<p>Now, the Application part completed, moving to our delayed_job and its works.</p>

<h3>Delayed Job</h3>

<p>  install delayed_job</p>

<p><img src="/images/dj/17.png" width="600" height="300"></p>

<pre><code>rails generate delayed_job:active_record
</code></pre>

<p><img src="/images/dj/18.png" width="900" height="700"></p>

<pre><code>rails db:migrate
</code></pre>

<p><img src="/images/dj/19.png" width="900" height="600"></p>

<p>set the below config in application.rb</p>

<pre><code>  config.active_job.queue_adapter = :delayed_job
</code></pre>

<p><img src="/images/dj/20.png" width="900" height="700"></p>

<p>Now the backup process code explained</p>

<pre><code>  def self.intiate_backup
    user_details = UserInformation.fetch_details
    if user_details.present?
      instance_data = []
      user_details.each do |user_data|
        user_backup_instance = UserInformationBackup.new
        user_backup_instance.first_name = user_data.first_name
        user_backup_instance.last_name = user_data.last_name
        user_backup_instance.secret_message =user_data.secret_message
        instance_data &lt;&lt; user_backup_instance
      end
      UserInformationBackup.import instance_data
      user_details.update_all(is_selected: true)
      end
    end
  end
</code></pre>

<p>now test this process via Delayed job, we can use the rails console to check this</p>

<p><img src="/images/dj/21.png" width="900" height="500"></p>

<p><img src="/images/dj/22.png" width="900" height="600"></p>

<p>now the entry got added, we can this delayed job using the command</p>

<pre><code>  bundle exec rails jobs:work
</code></pre>

<p><img src="/images/dj/23.png" width="900" height="600"></p>

<p>one issue we have encountered is we have used model.import , which is coming from</p>

<pre><code>gem 'activerecord-import'
</code></pre>

<p>it is not added here, need to add the gem and do the bundle install
<code>
  gem 'activerecord-import', '~&gt; 0.23.0'
</code></p>

<p><img src="/images/dj/24.png" width="600" height="300"></p>

<p>and do the same same as via console and restart the delayed job</p>

<p><img src="/images/dj/25.png" width="900" height="500"></p>

<p>hooray , our process is done, now it will be cloned to the user_information_backups table</p>

<p>user_informations table</p>

<p><img src="/images/dj/26.png" width="900" height="500"></p>

<p>user_information_backups table</p>

<p><img src="/images/dj/27.png" width="900" height="500"></p>

<p>now 2 images got the same, we can&rsquo;t see any difference. in order to check the difference we will create a new entry to the user_informations table via UI</p>

<p><img src="/images/dj/28.png" width="600" height="300"></p>

<p>I have added jayakrishnan as a new entry, since this data is not cloned by the user_information_backups, it will not be there.</p>

<p><img src="/images/dj/29.png" width="600" height="300"></p>

<p>Now we run the DJ via console and see the magic,</p>

<p><img src="/images/dj/30.png" width="900" height="500"></p>

<p><img src="/images/dj/31.png" width="900" height="500"></p>

<p><img src="/images/dj/32.png" width="600" height="300"></p>

<p>Now it is the time for our cookery show, we will do the delayed job recurring.</p>

<p>add below gem to the gemfile.</p>

<pre><code>  gem 'delayed_job_recurring', '~&gt; 0.3.7'
</code></pre>

<p>and do the bundle install</p>

<p>create a folder in app/interactors.</p>

<p>create a file in that, we can use any file name for example, created  a file name <em>clone_process.rb</em> in</p>

<pre><code>  app/interactors
</code></pre>

<pre><code>  class CloneProcess
    include Delayed::RecurringJob
    run_every 5.minutes

    def perform
      UserInformationBackup.intiate_backup
    end
  end
</code></pre>

<p>Now, this class needs to be called for one time,  for reuse, we can use the rakes;
path: <em>lib/tasks/recurring.rake</em></p>

<pre><code>namespace :recurring do
  task init: :environment do
    CloneProcess.schedule!
  end
end
</code></pre>

<p>In order to run this recurring job for one time, need to call  the rake task using</p>

<pre><code>   bundle exec rails recurring:init
</code></pre>

<p>Now</p>

<p><img src="/images/dj/33.png" width="900" height="500"></p>

<p>An entry is being made up in the DJ and it will be updated by the delayed_job_recurring gem</p>

<p><img src="/images/dj/34.png" width="900" height="500"></p>

<p>in order to test this we will create a new data via UI and wait for the DJ to pickup</p>

<p><img src="/images/dj/35.png" width="600" height="300"></p>

<p>but this data is not here in the clone table</p>

<p><img src="/images/dj/36.png" width="600" height="300"></p>

<p>after 5 minutes, DJ will pick up this.</p>

<p><img src="/images/dj/37.png" width="900" height="500"></p>

<p>in UI,</p>

<p><img src="/images/dj/38.png" width="600" height="300"></p>

<p>visit the offical doc for further details</p>

<p><a href="https://github.com/amitree/delayed_job_recurring">official doc</a></p>

<p>Hooray, my work is done here, feel free to comment if any issue</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Ruby and Postgres to GCP:Series2]]></title>
    <link href="http://anoobbava.github.io/blog/2018/04/12/install-ruby-and-postgres-to-gcp-series2/"/>
    <updated>2018-04-12T15:51:22+05:30</updated>
    <id>http://anoobbava.github.io/blog/2018/04/12/install-ruby-and-postgres-to-gcp-series2</id>
    <content type="html"><![CDATA[<p>Hi All, Welcome to series 2, here are explaining about the ruby and Postgres installation to our GCP Server. If you know about that in linux 16.04 version, you can skip this tutorial. this is entirely based on the ubuntu 16.04 LTS machine and not much . I read the digital ocean, GoRails etc to publish this article and use the tehniques explained by them also.</p>

<h2>Install Ruby</h2>

<p>  first need to connect to our GCP using pem file.</p>

<p>  <img src="/images/series2/0.png" width="800" height="400"></p>

<h3>Install RVM</h3>

<h4>connect gpg keys</h4>

<pre><code>   sudo apt-get install gnupg2 -y
  gpg2 --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3
</code></pre>

<p>  <img src="/images/series2/2.png" width="800" height="400"></p>

<h4>Install curl</h4>

<p>  install curl if not installed</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install curl</span></code></pre></td></tr></table></div></figure></p>

<p>  <img src="/images/series2/3.png" width="800" height="400"></p>

<h4>Use curl for rvm script</h4>

<p>  Now use the curl to install the rvm script</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\curl -sSL &lt;a href="https://get.rvm.io">https://get.rvm.io&lt;/a> -o rvm.sh</span></code></pre></td></tr></table></div></figure></p>

<p>  <img src="/images/series2/4.png" width="800" height="400"></p>

<h4>Install RVM</h4>

<p>  Now, the below command installs the latest version of the rvm and does all the depandancies.</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat rvm.sh | bash -s stable</span></code></pre></td></tr></table></div></figure></p>

<p>  <img src="/images/series2/5.png" width="800" height="400">
  Now, install the lates version of Ruby, using the below command</p>

<h4>RVM use</h4>

<p>  Installing RVM to /home/username/.rvm/</p>

<p>  Adding rvm PATH line to /home/username/.profile /home/username/.mkshrc /homeusername/.bashrc /home/username/.zshrc.</p>

<p>  Adding rvm loading line to /home/username/.profile /home/username/.bash_profile /home/username/.zlogin.</p>

<p>  Installation of RVM in /home/username/.rvm/ is almost complete:</p>

<ul>
<li>To start using RVM you need to run
<code>
source /home/username/.rvm/scripts/rvm
</code>
in all your open shell windows, in rare cases you need to reopen all shell windows.</li>
</ul>


<h4>Install latest Ruby</h4>

<pre><code class="``">    rvm install ruby --default
</code></pre>

<p>  <img src="/images/series2/7.png" width="800" height="400"></p>

<h4>check the ruby Version</h4>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -v</span></code></pre></td></tr></table></div></figure></p>

<p>  <img src="/images/series2/8.png" width="800" height="400"></p>

<h2>Install Postgres</h2>

<p>  execute the below commands one by one</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo sh -c &ldquo;echo &lsquo;deb &lt;a href="http://apt.postgresql.org/pub/repos/apt/">http://apt.postgresql.org/pub/repos/apt/&lt;/a> xenial-pgdg main&rsquo; > /etc/apt/sources.list.d/pgdg.list&rdquo;
</span><span class='line'>    wget &ndash;quiet -O - &lt;a href="http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc">http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc&lt;/a> | sudo apt-key add -
</span><span class='line'>    sudo apt-get update
</span><span class='line'>    sudo apt-get install postgresql-common
</span><span class='line'>    sudo apt-get install postgresql-9.5 libpq-dev</span></code></pre></td></tr></table></div></figure></p>

<p>  <img src="/images/series2/9.png" width="800" height="400">
  <img src="/images/series2/10.png" width="800" height="400">
  <img src="/images/series2/11.png" width="800" height="400">
  <img src="/images/series2/12.png" width="800" height="400">
  <img src="/images/series2/13.png" width="800" height="400"></p>

<h4>Roles in postgres</h4>

<p>  by default postgres create a root user called role here is &ldquo;postgres&rdquo;</p>

<p>  to use that</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo -i -u postgres</span></code></pre></td></tr></table></div></figure></p>

<p>  <img src="/images/series2/30.png" width="800" height="400"></p>

<h4>Create a New Role</h4>

<p>  We entered to the console, now, create a new Role.</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>createuser &ndash;interactive</span></code></pre></td></tr></table></div></figure></p>

<p>  <img src="/images/series2/15.png" width="800" height="400"></p>

<p>now, the user is created, now to check that type</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>psql</span></code></pre></td></tr></table></div></figure></p>

<p>when the console comes, then type</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\du</span></code></pre></td></tr></table></div></figure></p>

<p>  <img src="/images/series2/16.png" width="800" height="400"></p>

<h4>To set Password for User</h4>

<p>go to the psql by command</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo -u postgres psql</span></code></pre></td></tr></table></div></figure></p>

<p>  <img src="/images/series2/17.png" width="800" height="400"></p>

<p>  type</p>

<p>  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\password user_name</span></code></pre></td></tr></table></div></figure></p>

<p>  <img src="/images/series2/18.png" width="800" height="400"></p>

<p>this is the end of series, will post more in another series</p>

<p>all set. thanks guys, comment if any error or doubt happend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails App Deployment Using GCP:Series 1]]></title>
    <link href="http://anoobbava.github.io/blog/2018/04/11/rails-app-deployment-using-gcp/"/>
    <updated>2018-04-11T00:32:23+05:30</updated>
    <id>http://anoobbava.github.io/blog/2018/04/11/rails-app-deployment-using-gcp</id>
    <content type="html"><![CDATA[<h2>Deployment using GCP</h2>

<p><img src="/images/gcp-1/0.png" width="800" height="300"></p>

<p>This will be a series of tutorials in which step by step deployment of a ROR project in Google Cloud or GCP. From here onwards it is mentioned as GCP.</p>

<h2>Why GCP</h2>

<p>I am a huge Fan of Open Source Technologies, I have used the Heroku Free Tier, RedHat,Engine Yard Also. I have been tried to use the AWS for a long time. The issue with AWS is that it has free tier but needed credit card to sign-up.Also In the case of heroku, is a PAAS Application and all the process are automated and customisation is less.</p>

<h4>Pros of GCP</h4>

<ol>
<li>comes from Google , oh! Yaaah</li>
<li>No need of credit Card</li>
<li>Need only debit card with VISA or MASTER CARD.</li>
<li>gives us the $300 credit once signup.</li>
<li>$300 credit for 12 months</li>
</ol>


<p><code>Google Cloud Platform, offered by Google, is a suite of cloud computing services that runs on the same infrastructure that Google uses internally for its end-user products, such as Google Search and YouTube.</code></p>

<p>We have explained here is the basic use case to deploy the app, for more details, please refer the official guide.</p>

<h3>signup</h3>

<ol>
<li>go to <a href="http://www.cloud.google.com/">got to GCP</a></li>
<li>signup with your email</li>
<li>add the payment details; dont worry, only debit Card needed, they is no harm because of this, they dont take amount from account unless you have to upgrade the account.</li>
</ol>


<p>Note:
  I have used ICICI Debit Account, and they deducted 50Rs from my account to verify and returned the amount. So No Worries, only i got is a 2 rs for MY OTP.</p>

<p><img src="/images/gcp-1/0_1.png" width="300" height="600"></p>

<h3>Create a Project</h3>

<p>Now, create a Project.</p>

<p><img src="/images/gcp-1/1.png" width="800" height="300"></p>

<p>give a name for the project</p>

<p><img src="/images/gcp-&frac12;.png" width="800" height="400"></p>

<h3>Create an instance</h3>

<p>Now the process is create the instance. Instance is something like a virtual machine. This can be fetched from the Compute Engine. Example instances are production, staging etc.</p>

<p><img src="/images/gcp-1/3.png" width="800" height="400"></p>

<p>Now, add some details to complete the instance creation.</p>

<p><img src="/images/gcp-&frac14;.png" width="800" height="400"></p>

<p>I have used is the ubuntu 16.04, you can choose your BootDisk.</p>

<p>Now, important part, need to link the SSH Key to the GCP.</p>

<p><img src="/images/gcp-1/5.png" width="800" height="400"></p>

<p>click on the create instance</p>

<h3>Link SSH to GCP</h3>

<p>go to the metadata and click on the SSH keys and ADD,then paste the public key to there.</p>

<p><img src="/images/gcp-1/13.png" width="800" height="400"></p>

<p>In order to do that, need to copy the public key</p>

<ol>
<li>Show the available SSH keys</li>
</ol>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -al ~/.ssh</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/gcp-1/6.png" width="800" height="400"></p>

<ol>
<li>copy the desired public key</li>
</ol>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>head ~/.ssh/id_rsa.pub</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/gcp-1/7.png" width="800" height="400"></p>

<ol>
<li>Add the public Key to the GCP</li>
</ol>


<p><img src="/images/gcp-1/8.png" width="800" height="400"></p>

<h3>Create a Pem File</h3>

<p>because of security concerns and multiple connectivity of instances, We need to generate the pem file from the public key, this is achieved by using.</p>

<p>open a new terminal and run the below code.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -f ~/.ssh/id_rsa.pub -m &lsquo;PEM&rsquo; -e > public.pem</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/gcp-1/9.png" width="100" height="50"></p>

<p>Now the code will generate the pem file in the place of terminal points to , in my case it is home path</p>

<p>Now change the permission of the pem file, by below comand</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 600 public.pem</span></code></pre></td></tr></table></div></figure></p>

<h3>connect the GCP using SSH</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i public.pem user_name@external_ip</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/gcp-1/14.png" width="800" height="300"></p>

<p>user_name is the name which is shown when we copy the ssh key, here irfana_anoob is the user_name</p>

<p>external-ip is the IP which is given when we create the instance</p>

<p><img src="/images/gcp-1/15.png" width="800" height="300"></p>

<p>this is the Series1, will be posting more posts on this Also.</p>

<p>all set. thanks guys, comment if any error or doubt happend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Circle CI]]></title>
    <link href="http://anoobbava.github.io/blog/2017/10/24/introduction-to-circle-ci/"/>
    <updated>2017-10-24T20:06:55+05:30</updated>
    <id>http://anoobbava.github.io/blog/2017/10/24/introduction-to-circle-ci</id>
    <content type="html"><![CDATA[<h2>Intro &amp;&amp; Setup Project</h2>

<p>CircleCI helps you ship better code, faster. To kick things off, you&rsquo;ll need to add a config.yml file to your project, and start building. After that, we&rsquo;ll start a new build for you each time make a PR. Similar to travis; here also needed a yml file for configs and update.</p>

<h2>Steps</h2>

<p>1.Signup using github</p>

<p><img src="/images/circleci/intro.png" width="800" height="300"></p>

<ol>
<li>Add our Project</li>
</ol>


<p><img src="/images/circleci/add_project.png" width="800" height="300"></p>

<ol>
<li><p>Create a folder named .circleci and add a fileconfig.yml (so that the filepath in .circleci/config.yml).</p></li>
<li><p>Populate the config.yml with the contents of the below file.</p></li>
</ol>


<script src="https://gist.github.com/anoobbava/2c9417987a3e67210395119aa5083c48.js"></script>


<ol>
<li><p>Update the config.yml to reflect your project&rsquo;s configuration.</p></li>
<li><p>Push this change to GitHub.</p></li>
<li><p>Start building! This will launch your project on Circle CI , now it will analyse the code and check the system for PR.all done, system will automatically test when make our PR.</p></li>
</ol>


<p><img src="/images/circleci/circle_Pr.png" width="800" height="300"></p>

<p>Awesome, we got our error on build we can see what is the error.</p>

<p><img src="/images/circleci/circle_error_pr.png" width="800" height="300"></p>

<p>The issue is we have mentioned is ruby in gem file as 2.3.1 but in the config of circle is 2.4.1. we will update it as another commit.</p>

<p>I Found it, circle CI using docker images pre-built ones, Here we are using the ruby version 2.3.1 in Gemfile and the config.yml added 2.4.1. Going the below url
<a href="https://circleci.com/docs/2.0/circleci-images/#ruby">go to circle docs info</a>
- most matched version is 2.3; now we are commiting using that code. All work fine.Now we select the image,
We can select linux, IOS, or custom host in circle CI, For this tutorial I have used the linux plan, hobbyist one. We can use containers.</p>

<p><img src="/images/circleci/circle_all_test_passed.png" width="800" height="300"></p>

<p></p>
]]></content>
  </entry>
  
</feed>
